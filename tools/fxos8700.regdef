/*
 * Copyright (c) 2015 - 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2017 NXP
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*! File: fxos8700.regdef
* @brief The fxos8700.regdef file contains the register definitions for FXOS8700 sensor driver.
*/

#ifndef FXOS8700_H_
#define FXOS8700_H_
/**
 * @brief FXOS8700 internal register addresses explained in the FXOS8700 data sheet.
 */
enum {
    FXOS8700_STATUS           = 0x00, /*!< Alias for ::FXOS8700_DR_STATUS or ::FXOS8700_F_STATUS. */
    FXOS8700_OUT_X_MSB        = 0x01, /*!< 14-bit X-axis measurement data bits 13:6. */
    FXOS8700_OUT_X_LSB        = 0x02, /*!< 14-bit X-axis measurement data bits 5:0. */
    FXOS8700_OUT_Y_MSB        = 0x03, /*!< 14-bit Y-axis measurement data bits 13:6. */
    FXOS8700_OUT_Y_LSB        = 0x04, /*!< 14-bit Y-axis measurement data bits 5:0. */
    FXOS8700_OUT_Z_MSB        = 0x05, /*!< 14-bit Z-axis measurement data bits 13:6. */
    FXOS8700_OUT_Z_LSB        = 0x06, /*!< 14-bit Z-axis measurement data bits 5:0. */
    FXOS8700_F_SETUP          = 0x09, /*!< FIFO setup. */
    FXOS8700_TRIG_CFG         = 0x0A, /*!< FIFO event trigger configuration register. */
    FXOS8700_SYSMOD           = 0x0B, /*!< Current system mode. */
    FXOS8700_INT_SOURCE       = 0x0C, /*!< Interrupt status. */
    FXOS8700_WHO_AM_I         = 0x0D, /*!< Device ID. */
    FXOS8700_XYZ_DATA_CFG     = 0x0E, /*!< Acceleration dynamic range and filter enable settings. */
    FXOS8700_HP_FILTER_CUTOFF = 0x0F, /*!< Pulse detection highpass and lowpass filter enabling bits. */
    FXOS8700_PL_STATUS        = 0x10, /*!< Landscape/portrait orientation status. */
    FXOS8700_PL_CFG           = 0x11, /*!< Landscape/portrait configuration. */
    FXOS8700_PL_COUNT         = 0x12, /*!< Landscape/portrait debounce counter. */
    FXOS8700_PL_BF_ZCOMP      = 0x13, /*!< Back/front trip angle threshold. */
    FXOS8700_PL_THS_REG       = 0x14, /*!< Portrait to landscape trip threshold angle and hysteresis settings. */
    FXOS8700_A_FFMT_CFG       = 0x15, /*!< Freefall/motion function configuration. */
    FXOS8700_A_FFMT_SRC       = 0x16, /*!< Freefall/motion event source register. */
    FXOS8700_A_FFMT_THS       = 0x17, /*!< Freefall/motion threshold register. */
    FXOS8700_A_FFMT_COUNT     = 0x18, /*!< Freefall/motion debounce counter. */
    FXOS8700_TRANSIENT_CFG    = 0x1D, /*!< Transient function configuration. */
    FXOS8700_TRANSIENT_SRC    = 0x1E, /*!< Transient event status register. */
    FXOS8700_TRANSIENT_THS    = 0x1F, /*!< Transient event threshold. */
    FXOS8700_TRANSIENT_COUNT  = 0x20, /*!< Transient debounce counter. */
    FXOS8700_PULSE_CFG        = 0x21, /*!< Pulse function configuration. */
    FXOS8700_PULSE_SRC        = 0x22, /*!< Pulse function source register. */
    FXOS8700_PULSE_THSX       = 0x23, /*!< X-axis pulse threshold. */
    FXOS8700_PULSE_THSY       = 0x24, /*!< Y-axis pulse threshold. */
    FXOS8700_PULSE_THSZ       = 0x25, /*!< Z-axis pulse threshold. */
    FXOS8700_PULSE_TMLT       = 0x26, /*!< Time limit for pulse detection. */
    FXOS8700_PULSE_LTCY       = 0x27, /*!< Latency time for second pulse detection. */
    FXOS8700_PULSE_WIND       = 0x28, /*!< Window time for second pulse detection. */
    FXOS8700_ASLP_COUNT       = 0x29, /*!< The counter setting for auto-sleep period. */
    FXOS8700_CTRL_REG1        = 0x2A, /*!< System ODR, accelerometer OSR (Output sample rate), operating mode. */
    FXOS8700_CTRL_REG2        = 0x2B, /*!< Self-test, reset, accelerometer OSR, and sleep mode settings. */
    FXOS8700_CTRL_REG3        = 0x2C, /*!< Sleep mode interrupt wake enable, interrupt polarity, push-pull/open drain configuration. */
    FXOS8700_CTRL_REG4        = 0x2D, /*!< Interrupt enable register. */
    FXOS8700_CTRL_REG5        = 0x2E, /*!< Interrupt pin (INT1/INT2) map. */
    FXOS8700_OFF_X            = 0x2F, /*!< X-axis accelerometer offset adjust. */
    FXOS8700_OFF_Y            = 0x30, /*!< Y-axis accelerometer offset adjust. */
    FXOS8700_OFF_Z            = 0x31, /*!< Z-axis accelerometer offset adjust. */
    FXOS8700_M_DR_STATUS      = 0x32, /*!< The magnetometer data ready status. */
    FXOS8700_M_OUT_X_MSB      = 0x33, /*!< MSB of the 16-bit magnetometer data for X-axis. */
    FXOS8700_M_OUT_X_LSB      = 0x34, /*!< LSB of the 16-bit magnetometer data for X-axis. */
    FXOS8700_M_OUT_Y_MSB      = 0x35, /*!< MSB of the 16-bit magnetometer data for Y-axis. */
    FXOS8700_M_OUT_Y_LSB      = 0x36, /*!< LSB of the 16-bit magnetometer data for Y-axis. */
    FXOS8700_M_OUT_Z_MSB      = 0x37, /*!< MSB of the 16-bit magnetometer data for Z-axis. */
    FXOS8700_M_OUT_Z_LSB      = 0x38, /*!< LSB of the 16-bit magnetometer data for Z-axis. */
    FXOS8700_CMP_X_MSB        = 0x39, /*!< Bits [13:8] of integrated X-axis acceleration data. */
    FXOS8700_CMP_X_LSB        = 0x3A, /*!< Bits [7:0] of integrated X-axis acceleration data. */
    FXOS8700_CMP_Y_MSB        = 0x3B, /*!< Bits [13:8] of integrated Y-axis acceleration data. */
    FXOS8700_CMP_Y_LSB        = 0x3C, /*!< Bits [7:0] of integrated Y-axis acceleration data. */
    FXOS8700_CMP_Z_MSB        = 0x3D, /*!< Bits [13:8] of integrated Z-axis acceleration data. */
    FXOS8700_CMP_Z_LSB        = 0x3E, /*!< Bits [7:0] of integrated Z-axis acceleration data. */
    FXOS8700_M_OFF_X_MSB      = 0x3F, /*!< MSB of magnetometer X-axis offset. */
    FXOS8700_M_OFF_X_LSB      = 0x40, /*!< LSB of magnetometer X-axis offset. */
    FXOS8700_M_OFF_Y_MSB      = 0x41, /*!< MSB of magnetometer Y-axis offset. */
    FXOS8700_M_OFF_Y_LSB      = 0x42, /*!< LSB of magnetometer Y-axis offset. */
    FXOS8700_M_OFF_Z_MSB      = 0x43, /*!< MSB of magnetometer Z-axis offset. */
    FXOS8700_M_OFF_Z_LSB      = 0x44, /*!< LSB of magnetometer Z-axis offset. */
    FXOS8700_MAX_X_MSB        = 0x45, /*!< Magnetometer X-axis maximum value MSB. */
    FXOS8700_MAX_X_LSB        = 0x46, /*!< Magnetometer X-axis maximum value LSB. */
    FXOS8700_MAX_Y_MSB        = 0x47, /*!< Magnetometer Y-axis maximum value MSB. */
    FXOS8700_MAX_Y_LSB        = 0x48, /*!< Magnetometer Y-axis maximum value LSB. */
    FXOS8700_MAX_Z_MSB        = 0x49, /*!< Magnetometer Z-axis maximum value MSB. */
    FXOS8700_MAX_Z_LSB        = 0x4A, /*!< Magnetometer Z-axis maximum value LSB. */
    FXOS8700_MIN_X_MSB        = 0x4B, /*!< Magnetometer X-axis minimum value MSB. */
    FXOS8700_MIN_X_LSB        = 0x4C, /*!< Magnetometer X-axis minimum value LSB. */
    FXOS8700_MIN_Y_MSB        = 0x4D, /*!< Magnetometer Y-axis minimum value MSB. */
    FXOS8700_MIN_Y_LSB        = 0x4E, /*!< Magnetometer Y-axis minimum value LSB. */
    FXOS8700_MIN_Z_MSB        = 0x4F, /*!< Magnetometer Z-axis minimum value MSB. */
    FXOS8700_MIN_Z_LSB        = 0x50, /*!< Magnetometer Z-axis minimum value LSB. */
    FXOS8700_TEMP             = 0x51, /*!< Device temperature with a valid range of -128 to 127 degrees C. */
    FXOS8700_M_THS_CFG        = 0x52, /*!< Magnetic threshold detection function configuration. */
    FXOS8700_M_THS_SRC        = 0x53, /*!< Magnetic threshold event source register. */
    FXOS8700_M_THS_X_MSB      = 0x54, /*!< X-axis magnetic threshold MSB. */
    FXOS8700_M_THS_X_LSB      = 0x55, /*!< X-axis magnetic threshold LSB. */
    FXOS8700_M_THS_Y_MSB      = 0x56, /*!< Y-axis magnetic threshold MSB. */
    FXOS8700_M_THS_Y_LSB      = 0x57, /*!< Y-axis magnetic threshold LSB. */
    FXOS8700_M_THS_Z_MSB      = 0x58, /*!< Z-axis magnetic threshold MSB. */
    FXOS8700_M_THS_Z_LSB      = 0x59, /*!< Z-axis magnetic threshold LSB. */
    FXOS8700_M_THS_COUNT      = 0x5A, /*!< Magnetic threshold debounce counter. */
    FXOS8700_M_CTRL_REG1      = 0x5B, /*!< Control for magnetometer sensor functions. */
    FXOS8700_M_CTRL_REG2      = 0x5C, /*!< Control for magnetometer sensor functions. */
    FXOS8700_M_CTRL_REG3      = 0x5D, /*!< Control for magnetometer sensor functions. */
    FXOS8700_M_INT_SRC        = 0x5E, /*!< Magnetometer interrupt source. */
    FXOS8700_A_VECM_CFG       = 0x5F, /*!< Acceleration vector magnitude configuration register. */
    FXOS8700_A_VECM_THS_MSB   = 0x60, /*!< Acceleration vector magnitude threshold MSB. */
    FXOS8700_A_VECM_THS_LSB   = 0x61, /*!< Acceleration vector magnitude threshold LSB. */
    FXOS8700_A_VECM_CNT       = 0x62, /*!< Acceleration vector magnitude debounce count. */
    FXOS8700_A_VECM_INITX_MSB = 0x63, /*!< Acceleration vector magnitude X-axis reference value MSB. */
    FXOS8700_A_VECM_INITX_LSB = 0x64, /*!< Acceleration vector magnitude X-axis reference value LSB. */
    FXOS8700_A_VECM_INITY_MSB = 0x65, /*!< Acceleration vector magnitude Y-axis reference value MSB. */
    FXOS8700_A_VECM_INITY_LSB = 0x66, /*!< Acceleration vector magnitude Y-axis reference value LSB. */
    FXOS8700_A_VECM_INITZ_MSB = 0x67, /*!< Acceleration vector magnitude Z-axis reference value MSB. */
    FXOS8700_A_VECM_INITZ_LSB = 0x68, /*!< Acceleration vector magnitude Z-axis reference value LSB. */
    FXOS8700_M_VECM_CFG       = 0x69, /*!< Magnetic vector magnitude configuration register. */
    FXOS8700_M_VECM_THS_MSB   = 0x6A, /*!< Magnetic vector magnitude threshold MSB. */
    FXOS8700_M_VECM_THS_LSB   = 0x6B, /*!< Magnetic vector magnitude threshold LSB. */
    FXOS8700_M_VECM_CNT       = 0x6C, /*!< Magnetic vector magnitude debounce count. */
    FXOS8700_M_VECM_INITX_MSB = 0x6D, /*!< Magnetic vector magnitude X-axis reference value MSB. */
    FXOS8700_M_VECM_INITX_LSB = 0x6E, /*!< Magnetic vector magnitude X-axis reference value LSB. */
    FXOS8700_M_VECM_INITY_MSB = 0x6F, /*!< Magnetic vector magnitude Y-axis reference value MSB. */
    FXOS8700_M_VECM_INITY_LSB = 0x70, /*!< Magnetic vector magnitude Y-axis reference value LSB. */
    FXOS8700_M_VECM_INITZ_MSB = 0x71, /*!< Magnetic vector magnitude Z-axis reference value MSB. */
    FXOS8700_M_VECM_INITZ_LSB = 0x72, /*!< Magnetic vector magnitude Z-axis reference value LSB. */
    FXOS8700_A_FFMT_THS_X_MSB = 0x73, /*!< X-axis FFMT threshold MSB. */
    FXOS8700_A_FFMT_THS_X_LSB = 0x74, /*!< X-axis FFMT threshold LSB. */
    FXOS8700_A_FFMT_THS_Y_MSB = 0x75, /*!< Y-axis FFMT threshold MSB. */
    FXOS8700_A_FFMT_THS_Y_LSB = 0x76, /*!< Y-axis FFMT threshold LSB. */
    FXOS8700_A_FFMT_THS_Z_MSB = 0x77, /*!< Z-axis FFMT threshold MSB. */
    FXOS8700_A_FFMT_THS_Z_LSB = 0x78, /*!< Z-axis FFMT threshold LSB. */
};

#sa sa_00 1E
#sa sa_01 1D
#sa sa_10 1C
#sa sa_11 1F

#who PROD_VALUE C7
#who PROD_VALUE_SPI_FIX C9
/**
 * The following are the macro definitions to address each bit and its value in the hardware registers.
 */
// DR_STATUS           : 0x00 -  Alias for ::FXOS8700_DR_STATUS or ::FXOS8700_F_STATUS. 
#add xdr        0x01
#val DRDY          1   xdr is set to 1 whenever a new X-axis data acquisition is completed. xdr is cleared anytime the OUT_X_MSB register is read.
#add ydr        0x02
#val DRDY          1   ydr is set to 1 whenever a new Y-axis data acquisition is completed. xdr is cleared anytime the OUT_Y_MSB register is read.
#add zdr        0x04
#val DRDY          1   zdr is set to 1 whenever a new Z-axis data acquisition is completed. xdr is cleared anytime the OUT_Z_MSB register is read.
#add zyxdr      0x08
#val DRDY          1   zyxdr signals that a new acquisition for any of the enabled channels is available. zyxdr is cleared when the high-bytes of the acceleration data (OUT_X_MSB, OUT_Y_MSB, OUT_Z_MSB) are read.
#add xow        0x10
#val OWR           1
#add yow        0x20
#val OWR           1
#add zow        0x40
#val OWR           1
#add zyxow      0x80
#val OWR           1

// F_STATUS         : 0x00 - Fifo Status register
#add f_cnt        0x3F These bits indicate the number of acceleration samples currently stored in the FIFO buffer. Count 0b00_0000 indicates that the FIFO is empty
#add f_wmrk_flag  0x40
#val    NOEVT     0   No FIFO watermark event detected
#val    EVTDET    1
#add f_ovf        0x80
#val    NOOVFL    0   No FIFO overflow events detected
#val    OVFLDET   1   FIFO overflow event detected

// OUT_X_MSB        : 0x01 - MSB of Accelerometer X value
#add xd 0xFF        -  14-bit X-axis measurement data bits 13:6.

// OUT_X_LSB        : 0x02 -  LSB of Accelerometer X value
#add xd 0xFC        -  14-bit X-axis measurement data bits 5:0.

// OUT_Y_MSB        : 0x03 -  14-bit Y-axis measurement data bits 13:6. 
#add yd 0xFF        -  14-bit Y-axis measurement data bits 13:6.

// OUT_Y_LSB        : 0x04 -  14-bit Y-axis measurement data bits 5:0. 
#add yd 0xFC        -  14-bit Y-axis measurement data bits 5:0.

// OUT_Z_MSB        : 0x05 -  14-bit Z-axis measurement data bits 13:6. 
#add zd 0xFF        -  14-bit Z-axis measurement data bits 13:6.

// OUT_Z_LSB        : 0x06 -  14-bit Z-axis measurement data bits 5:0. 
#add zd 0xFC        -  14-bit Z-axis measurement data bits 5:0.

// F_SETUP          : 0x09 -  FIFO setup. 
#add f_mode  0xC0 - FIFO Buffer operating mode
#val     FIFO_DISABLE  0x00 FIFO is disabled
#val     FIFO_CIRC     0x01 FIFO contains the most recent samples when overflowed (circular buffer). Oldest sample is discarded to be replaced by new sample
#val     FIFO_STOP_OVF 0x02 FIFO stops accepting new samples when overflowed
#val     FIFO_TRIGGER  0x03 FIFO trigger mode 
#add f_wmrk  0x3F FIFO sample count watermark

// TRIG_CFG         : 0x0A -  FIFO event trigger configuration register. 
#add trig_a_vecm 0x02
#val EN  0x01 Acceleration vector-magnitude FIFO trigger enable 
#val DIS 0x00 Acceleration vector-magnitude FIFO trigger disable   
#add trig_a_ffmt 0x04
#val EN  0x01 Freefall/motion interrupt FIFO trigger enable
#val DIS 0x00 Freefall/motion interrupt FIFO trigger disable  
#add trig_pulse 0x08
#val EN  0x01 Pluse interrupt FIFO trigger enable
#val DIS 0x00 Pluse FIFO trigger enable 
#add trig_lndprt 0x10
#val EN  0x01 Landscape/portrait orientation interrupt FIFO trigger enable
#val DIS 0x00 Landscape/portrait orientation interrupt FIFO trigger disable
#add trig_trans 0x20
#val EN  0x01 Transient interrupt FIFO trigger enable
#val DIS 0x00 Transient interrupt FIFO trigger disable

// SYSMOD           : 0x0B -  Current system mode. 
#add sysmod 0x03 
#val STANDBY 0x00 Standby mode
#val WAKE    0x01 Wake mode
#val SLEEP   0x02 Sleep mode 
#add fgt 0x7C
#add fgerr 0x80


// INT_SOURCE       : 0x0C -  Interrupt status. 
#add src_drdy 0x01
#add src_a_vecm 0x02
#add src_ffmt 0x04
#add src_pulse 0x08
#add src_lndprt 0x10
#add src_trans 0x20
#add src_fifo 0x40
#add src_aslp 0x80

// WHO_AM_I         : 0x0D -  Device ID. 

// XYZ_DATA_CFG     : 0x0E -  Acceleration dynamic range and filter enable settings. 
#add HPF_OUT             0x10 - Enable high-pass filter on acceleration output data
#val EN       0x01 Enable high-pass filter on acceleration output data
#val DISABLE  0x00 High-pass filter is disabled
#add FS                  0x03
#val 2G_0P244     0x00 0.244 mg/LSB
#val 4G_0P488     0x01 0.488 mg/LSB
#val 8G_0P976     0x02 0.976 mg/LSB

// HP_FILTER_CUTOFF : 0x0F -  Pulse detection highpass and lowpass filter enabling bits. 
#add PULSE_HPF_BYP        0x20
#val EN           0x00  HPF enabled for pulse processing
#val BYPASS       0x01  HPF bypassed for pulse processing
#add PULSE_LPF_EN         0x10
#val EN           0x01  LPF enabled for pulse processing
#val DISABLE      0x00  LPF bypassed for pulse processing
#add SEL                  0x03
#val EN           0x01  HPF cutoff frequency selection Enabled
#val DISABLE      0x00  HPF cutoff frequency selection Disabled  

// PL_STATUS        : 0x10 -  Landscape/portrait orientation status. 
#add NEWLP                0x80
#add LO                   0x40
#add LAPO                 0x06
#add BAFRO                0x01

// PL_CFG           : 0x11 -  Landscape/portrait configuration. 
#add DBCNTM               0x80
#val DECREMENT_MODE          0 Decrements debounce whenever condition of interest is no longer valid
#val CLEAR_MODE              1 Clears counter whenever condition of interest is no longer valid
#add PL_EN                0x40
#val DISABLE                 0 Portrait/Landscape detection is disabled.
#val ENABLE                  1 Portrait/Landscape detection is enabled.

// PL_COUNT         : 0x12 -  Landscape/portrait debounce counter. 
#add dbnce 0xFF

// PL_BF_ZCOMP      : 0x13 -  Back/front trip angle threshold. 
#add BKFR                 0xC0
#val BF_LT80_GT280__FB_LT260_GT100     0
#val BF_LT75_GT285__FB_LT255_GT105     1
#val BF_LT70_GT290__FB_LT250_GT110     2
#val BF_LT65_GT295__FB_LT245_GT115     3
#add ZLOCK                0x07
#val 13P6MIN_14P5MAX         0
#val 17P1MIN_18P2MAX         1
#val 20P7MIN_22P0MAX         2
#val 24P4MIN_25P9MAX         4
#val 28P1MIN_30P0MAX         4
#val 32P0MIN_34P2MAX         5
#val 36P1MIN_38P7MAX         6
#val 40P4MIN_43P4MAX         7

// PL_THS_REG       : 0x14 -  Portrait to landscape trip threshold angle and hysteresis settings. 
#add PL_THS               0xF8
#val 15DEG                0x07
#val 20DEG                0x09
#val 30DEG                0x0C
#val 35DEG                0x0D
#val 40DEG                0x0F
#val 45DEG                0x10
#val 55DEG                0x13
#val 60DEG                0x14
#val 70DEG                0x17
#val 75DEG                0x19
#add HYS                  0x07
#val LP45_PL45            0x0
#val LP49_PL41            0x1
#val LP52_PL38            0x2
#val LP56_PL34            0x3
#val LP59_PL31            0x4
#val LP62_PL28            0x5
#val LP66_PL24            0x6
#val LP69_PL21            0x7

// A_FFMT_CFG      : 0x15 -  Freefall/motion function configuration. 
#add ELE                  0x80
#val EN                   0x01 Event flag latch enabled
#val DIS                  0x00 Event flag latch disabled 
#add OAE                  0x40
#val FREEFALL             0x00 Freefall flag
#val MOTION               0x01 Motion flag
#add ZEFE                 0x20
#val DIS                  0x00 Event detection disabled
#val RAISE_EVENT          0x01 Raise event flag on measured Z-axis acceleration above/below threshold 
#add YEFE                 0x10
#val DIS                  0x00 Event detection disabled
#val RAISE_EVENT          0x01 Raise event flag on measured Y-axis acceleration above/below threshold 
#add XEFE                 0x08
#val DIS                  0x00 Event detection disabled
#val RAISE_EVENT          0x01 Raise event flag on measured X-axis acceleration above/below threshold 

// A_FFMT_SRC      : 0x16 -  Freefall/motion event source register. 
#add EA                   0x80
#add ZHE                  0x20
#add ZHP                  0x10
#add YHE                  0x08
#add YHP                  0x04
#add XHE                  0x02
#add XHP                  0x01

// A_FFMT_THS      : 0x17 -  Freefall/motion threshold register. 
#add DBCNTM               0x80
#add THS                  0x7F

// A_FFMT_COUNT    : 0x18 -  Freefall/motion debounce counter. 


// TRANSIENT_CFG    : 0x1D -  Transient function configuration. 
#add TELE                 0x10
#val EN                   0x01  Event flag latch enabled: the transient interrupt event flag is latched and a read of the TRANSIENT_SRC register is required to clear the event flag
#val DIS                  0x00  Event flag latch disabled: the transient interrupt flag reflects the real-time status of the function
#add ZTEFE                0x08
#val EN                   0x01  Z-axis event detection enabled. Raise event flag on Z-axis acceleration value greater than threshold
#val DIS                  0x00  Z-axis event detection disabled
#add YTEFE                0x04  
#val EN                   0x01  Y-axis event detection enabled. Raise event flag on Y-axis acceleration value greater than threshold
#val DIS                  0x00  Y-axis event detection disabled
#add XTEFE                0x02
#val EN                   0x01  X-axis event detection enabled. Raise event flag on X-axis acceleration value greater than threshold
#val DIS                  0x00  X-axis event detection disabled
#add HPF_BYP              0x01
#val EN                   0x01 High-pass filter is not applied to accelerometer data input to the transient function
#val DIS                  0x00 High-pass filter is applied to accelerometer data input to the transient function

// TRANSIENT_SRC    : 0x1E -  Transient event status register. 
#add TRAN_EA            0x40
#add TRAN_ZEF           0x20
#add TRAN_ZPOL          0x10
#add TRAN_YEF           0x08
#add TRAN_YPOL          0x04
#add TRAN_XEF           0x02
#add TRANS_XPOL         0x01

// TRANSIENT_THS    : 0x1F -  Transient event threshold. 
#add tr_ths 0x7F
#val DECREMENTS  0x00 Decrements debounce counter when the transient event condition is not true during the current ODR period
#val CLEAR       0x01 Clears debounce counter when the transient event condition is not true during the current ODR period
#add tr_dbcntm 0x80

// TRANSIENT_COUNT  : 0x20 -  Transient debounce counter. 



// PULSE_CFG        : 0x21 -  Pulse function configuration. 
#add pls_dpa                0x80
#val DIS                    0x00 Setting the pls_dpa bit momentarily suspends the double-tap detection if the start of a pulse is detected during the time period specified by the PULSE_LTCY register and the pulse ends before the end of the time period specified by the PULSE_LTCY register
#val EN                     0x01 Double-pulse detection is not aborted if the start of a pulse is detected during the time period specified by the PULSE_LTCY register
#add pls_ele                0x40
#val DIS                    0x00 Event flag latch disabled
#val EN                     0x01 Event flag latch enabled
#add pls_zdpefe             0x20
#val DIS                    0x00 Event flag latch disabled
#val EN                     0x01 Raise event flag on detection of double-pulse event on Z-axis
#add pls_zspefe             0x10
#val DIS                    0x00 Event flag latch disabled
#val EN                     0x01 Raise event flag on detection of single-pulse event on Z-axis
#add pls_ydpefe             0x08
#val DIS                    0x00 Event flag latch disabled
#val EN                     0x01 Raise event flag on detection of double-pulse event on Y-axis 
#add pls_yspefe             0x04
#val DIS                    0x00 Event flag latch disabled
#val EN                     0x01 Raise event flag on detection of single-pulse event on Y-axis
#add pls_xdpefe             0x02
#val DIS                    0x00 Event flag latch disabled
#val EN                     0x01 Raise event flag on detection of double-pulse event on X-axis
#add pls_xspefe             0x01
#val DIS                    0x00 Event flag latch disabled
#val EN                     0x01 Raise event flag on detection of single-pulse event on X-axis

// PULSE_SRC        : 0x22 -  Pulse function source register. 
#add pls_src_polx               0x01
#add pls_src_poly               0x02
#add pls_src_polz               0x04
#add pls_src_dpe                0x08
#add pls_src_axx                0x10
#add pls_src_axy                0x20
#add pls_src_axz                0x40
#add pls_src_ea                 0x80

// PULSE_THSX       : 0x23 -  X-axis pulse threshold. 
#add pls_thsx 0x7F

// PULSE_THSY       : 0x24 -  Y-axis pulse threshold. 
#add pls_thsy 0x7F

// PULSE_THSZ       : 0x25 -  Z-axis pulse threshold. 
#add pls_thsz 0x7F

// PULSE_TMLT       : 0x26 -  Time limit for pulse detection. 

// PULSE_LTCY       : 0x27 -  Latency time for second pulse detection. 
// PULSE_WIND       : 0x28 -  Window time for second pulse detection. 

// ASLP_COUNT       : 0x29 -  The counter setting for auto-sleep period. 

// CTRL_REG1        : 0x2A -  System ODR, accelerometer OSR (Output sample rate), operating mode. 
#add ASLP_RATE           0xC0
#val 50_Hz                  0
#val 12P5_Hz                1
#val 6P25_Hz                2
#val 1P56_Hz                3
#add DR                  0x38
#val SINGLE_800_hz          0
#val SINGLE_400_hz          1
#val SINGLE_200_hz          2
#val SINGLE_100_hz          3
#val SINGLE_50_hz           4
#val SINGLE_12P5_hz         5
#val SINGLE_6P25_hz         6
#val SINGLE_1P5625_hz       7
#val HYBRID_400_hz          0
#val HYBRID_200_hz          1
#val HYBRID_100_hz          2
#val HYBRID_50_hz           3
#val HYBRID_25_hz           4
#val HYBRID_6P25_hz         5
#val HYBRID_3P125_hz        6
#val HYBRID_0P7813_hz       7
#add LNOISE              0x04
#val NORMAL              0x0  Normal mode 
#val REDUCED_NOISE       0x01 Reduced noise mode; Note that the FSR setting is restricted to Â±2 g or Â±4 g mode. This feature cannot be used in Â±8 g mode
#add F_READ              0x02
#val NORMAL              0x0  Normal mode 
#val FAST                0x01 Fast-read mode 
#add ACTIVE              0x01
#val active_mode 1  Active mode
#val standby_mode 0 Standby mode

// CTRL_REG2        : 0x2B -  Self-test, reset, accelerometer OSR, and sleep mode settings. 
#add st                   0x80
#val DIS                   0x00 Self-test disabled  
#val EN                    0x01 Self-test enabled 
#add RST                  0x40
#val EN                   0x01 Device reset enabled
#val DIS                  0x00 Device reset disabled
#add SMODS                0x18
#val NORMAL                  0
#val LOW_NOISE_LOW_POWER     1
#val HIGH_RES                2
#val LOW_POWER               3
#add SLPE                 0x04
#val EN                      1
#val DISABLE                 0
#add MODS                 0x03
#val NORMAL                  0
#val LOW_NOISE_LOW_POWER     1
#val HIGH_RES                2
#val LOW_POWER               3

// CTRL_REG3        : 0x2C -  Sleep mode interrupt wake enable, interrupt polarity, push-pull/open drain configuration. 
#add FIFO_GATE            0x80
#val BYPASSED             0x00  FIFO gate is bypassed
#val BLOCKED              0x01  The FIFO input buffer is blocked from accepting new samples when transitioning from wake-to-sleep mode or from sleep-to-wake mode until the FIFO is flushed
#add WAKE_TRANS           0x40
#val DIS                  0x00  Transient function is disabled in sleep mode 
#val EN                   0x01  Transient function is enabled in sleep mode and can generate an interrupt to wake the system
#add WAKE_LNDPRT          0x20
#val DIS                  0x00  Orientation function is disabled sleep mode
#val EN                   0x01  Orientation function is enabled in sleep mode and can generate an interrupt to wake the system
#add WAKE_PULSE           0x10
#val DIS                  0x00  Pulse function is disabled in sleep mode
#val EN                   0x01  Pulse function is enabled in sleep mode and can generate an interrupt to wake the system
#add WAKE_FFMT            0x08
#val DIS                  0x00  Freefall/motion function is disabled in sleep mode
#val EN                   0x01  Freefall/motion function is enabled in sleep mode and can generate an interrupt to wake the system
#add wake_a_vecm          0x04
#val DIS                  0x00  Acceleration vector-magnitude function is disabled in sleep mode
#val EN                   0x01  Acceleration vector-magnitude function is enabled in sleep mode and can generate an interrupt to wake the system
#add IPOL                 0x02
#val ACTIVE_LOW                  0x00  Active Low
#val ACTIVE_HIGH                 0x01  Active High 
#add PP_OD                0x01
#val PUSH_PULL            0x00 Push-pull
#val OPEN_DRAIN           0x01 Open Drain

// CTRL_REG4        : 0x2D -  Interrupt enable register. 
#add INT_EN_ASLP          0x80
#val DIS                  0x00 Auto-sleep/wake interrupt disabled
#val EN                   0x01 Auto-sleep/wake interrupt Enabled
#add INT_EN_FIFO          0x40
#val DIS                  0x00 FIFO interrupt disabled  
#val EN                   0x01 FIFO interrupt enabled 
#add INT_EN_TRANS         0x20
#val DIS                  0x00 Transient interrupt disabled
#val EN                   0x01 Transient interrupt enabled
#add INT_EN_LNDPRT        0x10
#val DIS                  0x00 Orientation (landscape/portrait) interrupt disabled
#val EN                   0x01 Orientation (landscape/portrait) interrupt enabled
#add INT_EN_PULSE         0x08
#val DIS                  0x00 Pulse detection interrupt disabled
#val EN                   0x01 Pulse detection interrupt enabled
#add INT_EN_FFMT          0x04
#val DIS                  0x00 Freefall/motion interrupt disabled
#val EN                   0x01 Freefall/motion interrupt enabled
#add int_en_a_vecm        0x02
#val DIS                  0x00 Acceleration vector-magnitude interrupt disabled
#val EN                   0x01 Acceleration vector-magnitude interrupt disabled 
#add INT_EN_DRDY          0x01
#val DIS                  0x00 Data-ready interrupt disabled
#val EN                   0x01 Data-ready interrupt Enabled

// CTRL_REG5        : 0x2E -  Interrupt pin (INT1/INT2) map. 
#add INT_CFG_ASLP         0x80
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin
#add INT_CFG_FIFO         0x40
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin
#add INT_CFG_TRANS        0x20
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin
#add INT_CFG_LNDPRT       0x10
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin
#add INT_CFG_PULSE        0x08
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin
#add INT_CFG_FFMT         0x04
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin
#add int_cfg_a_vecm       0x02
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin 
#add INT_CFG_DRDY         0x01
#val INT2                 0x00 Interrupt is routed to INT2 pin
#val INT1                 0x01 Interrupt is routed to INT1 pin 

// OFF_X            : 0x2F -  X-axis accelerometer offset adjust. 
// OFF_Y            : 0x30 -  Y-axis accelerometer offset adjust. 
// OFF_Z            : 0x31 -  Z-axis accelerometer offset adjust. 

// M_DR_STATUS      : 0x32 -  The magnetometer data ready status. 
#add ZYXOW                0x80
#add ZOW                  0x40
#add YOW                  0x20
#add XOW                  0x10
#add ZYXDR                0x08
#add ZDR                  0x04
#add YDR                  0x02
#add XDR                  0x01

// M_OUT_X_MSB      : 0x33 -  MSB of the 16-bit magnetometer data for X-axis. 
// M_OUT_X_LSB      : 0x34 -  LSB of the 16-bit magnetometer data for X-axis. 
// M_OUT_Y_MSB      : 0x35 -  MSB of the 16-bit magnetometer data for Y-axis. 
// M_OUT_Y_LSB      : 0x36 -  LSB of the 16-bit magnetometer data for Y-axis. 
// M_OUT_Z_MSB      : 0x37 -  MSB of the 16-bit magnetometer data for Z-axis. 
// M_OUT_Z_LSB      : 0x38 -  LSB of the 16-bit magnetometer data for Z-axis. 

// CMP_X_MSB        : 0x39 -  Bits [13:8] of integrated X-axis acceleration data. 
#add cmp_x 0x3F

// CMP_X_LSB        : 0x3A -  Bits [7:0] of integrated X-axis acceleration data. 
// CMP_Y_MSB        : 0x3B -  Bits [13:8] of integrated Y-axis acceleration data. 
#add cmp_y 0x3F

// CMP_Y_LSB        : 0x3C -  Bits [7:0] of integrated Y-axis acceleration data. 
// CMP_Z_MSB        : 0x3D -  Bits [13:8] of integrated Z-axis acceleration data. 
#add cmp_z 0x3F

// CMP_Z_LSB        : 0x3E -  Bits [7:0] of integrated Z-axis acceleration data. 
// M_OFF_X_MSB      : 0x3F -  MSB of magnetometer X-axis offset. 
// M_OFF_X_LSB      : 0x40 -  LSB of magnetometer X-axis offset. 
#add m_off_x 0xFE

// M_OFF_Y_MSB      : 0x41 -  MSB of magnetometer Y-axis offset. 
// M_OFF_Y_LSB      : 0x42 -  LSB of magnetometer Y-axis offset. 
#add m_off_y 0xFE

// M_OFF_Z_MSB      : 0x43 -  MSB of magnetometer Z-axis offset. 
// M_OFF_Z_LSB      : 0x44 -  LSB of magnetometer Z-axis offset. 
#add m_off_z 0xFE

// MAX_X_MSB        : 0x45 -  Magnetometer X-axis maximum value MSB. 
// MAX_X_LSB        : 0x46 -  Magnetometer X-axis maximum value LSB. 
// MAX_Y_MSB        : 0x47 -  Magnetometer Y-axis maximum value MSB. 
// MAX_Y_LSB        : 0x48 -  Magnetometer Y-axis maximum value LSB. 
// MAX_Z_MSB        : 0x49 -  Magnetometer Z-axis maximum value MSB. 
// MAX_Z_LSB        : 0x4A -  Magnetometer Z-axis maximum value LSB. 
// MIN_X_MSB        : 0x4B -  Magnetometer X-axis minimum value MSB. 
// MIN_X_LSB        : 0x4C -  Magnetometer X-axis minimum value LSB. 
// MIN_Y_MSB        : 0x4D -  Magnetometer Y-axis minimum value MSB. 
// MIN_Y_LSB        : 0x4E -  Magnetometer Y-axis minimum value LSB. 
// MIN_Z_MSB        : 0x4F -  Magnetometer Z-axis minimum value MSB. 
// MIN_Z_LSB        : 0x50 -  Magnetometer Z-axis minimum value LSB. 

// TEMP             : 0x51 -  Device temperature with a valid range of -128 to 127 degrees C. 
#add die_temperature 0xFF

// M_THS_CFG        : 0x52 -  Magnetic threshold detection function configuration. 
#add M_THS_ELE            0x80
#add M_THS_OAE            0x40
#add M_THS_ZEFE           0x20
#add M_THS_YEFE           0x10
#add M_THS_XEFE           0x08
#add M_THS_WAKE_EN        0x04
#add M_THS_INT_EN         0x02
#add M_THS_INT_CFG        0x01

// M_THS_SRC        : 0x53 -  Magnetic threshold event source register. 
#add M_THS_EA             0x80
#add M_THS_ZHE            0x20
#add M_THS_ZHP            0x10
#add M_THS_YHE            0x08
#add M_THS_YHP            0x04
#add M_THS_XHE            0x02
#add M_THS_XHP            0x01

// M_THS_X_MSB      : 0x54 -  X-axis magnetic threshold MSB. 
#add m_ths_x 0x7F

// M_THS_X_LSB      : 0x55 -  X-axis magnetic threshold LSB. 
// M_THS_Y_MSB      : 0x56 -  Y-axis magnetic threshold MSB. 
#add m_ths_y 0x7F

// M_THS_Y_LSB      : 0x57 -  Y-axis magnetic threshold LSB. 
// M_THS_Z_MSB      : 0x58 -  Z-axis magnetic threshold MSB. 
#add m_ths_z 0x7F

// M_THS_Z_LSB      : 0x59 -  Z-axis magnetic threshold LSB. 
// M_THS_COUNT      : 0x5A -  Magnetic threshold debounce counter. 

// M_CTRL_REG1      : 0x5B -  Control for magnetometer sensor functions. 
#add M_ACAL               0x80
#val EN                      1  Auto-calibration feature enabled
#val DISABLE                 0  Auto-calibration feature disabled
#add M_RST                0x40
#val EN                      1  One-shot magnetic sensor reset enabled, hw cleared when complete
#val DISABLE                 0  No magnetic sensor reset active
#add M_OST                0x20  One-shot triggered magnetic measurement mode:
#val EN                      1  If device is in Active mode no action is taken. If device is in Standby mode, take one set of magnetic measurements, clear this bit, and return to Standby mode.
#val DISABLE                 0  No action taken, or one-shot measurement complete
#add M_OS                 0x1C  M-cell oversample ratio
#val OSR0                    0  1.56=16, 6.25=4, 12.5=2, 50=2, 100=2, 200=2, 400=2, 800=2
#val OSR1                    1  1.56=16, 6.25=4, 12.5=2, 50=2, 100=2, 200=2, 400=2, 800=2
#val OSR2                    2  1.56=32, 6.25=8, 12.5=4, 50=2, 100=2, 200=2, 400=2, 800=2
#val OSR3                    3  1.56=64, 6.25=16, 12.5=8, 50=2, 100=2, 200=2, 400=2, 800=2
#val OSR4                    4  1.56=128, 6.25=32, 12.5=16, 50=4, 100=2, 200=2, 400=2, 800=2
#val OSR5                    5  1.56=256, 6.25=64, 12.5=32, 50=8, 100=4, 200=2, 400=2, 800=2
#val OSR6                    6  1.56=512, 6.25=128, 12.5=64, 50=16, 100=8, 200=4, 400=2, 800=2
#val OSR7                    7  1.56=1024, 6.25=256, 12.5=128, 50=32, 100=16, 200=8, 400=4, 800=2
#add M_HMS                0x03
#val ACCEL_ONLY              0  0b00 = Only accelerometer sensor is active
#val MAG_ONLY                1  0b01 = Only magnetometer sensor is active
#val HYBRID_MODE             3  0b11 = Hybrid mode, both accelerometer and magnetometer sensors are active

// M_CTRL_REG2      : 0x5C -  Control for magnetometer sensor functions. 
#add M_AUTOINC            0x20
#val HYBRID_MODE             1   With hyb_autoinc_mode = 1 and fast-read mode is disabled (CTRL_REG1 [f_read] = 0), the register address will automatically advance to register x33 (M_OUT_X_MSB) after reading register x06 (OUT_Z_LSB) in burst-read mode. \n For hyb_autoinc_mode = 1 and fast read mode enabled (CTRL_REG1[f_read = 1) the register address will automatically advance to register x33 (M_OUT_X_MSB) after reading register x05 (OUT_Z_MSB) during a burstread mode. Please refer to the register map auto-increment address column for further information. 
#val ACCEL_ONLY_MODE      0  hyb_autoinc_mode = 0
#add M_MAXMIN_DIS         0x10
#val DIS                  0x00 Magnetic min/max detection function is enabled
#val EN                   0x01 Magnetic min/max detection function is disabled
#add M_MAXMIN_DIS_THS     0x08
#val DIS                  0x00 No impact to magnetic min/max detection function on a magnetic threshold event
#val EN                   0x01 Magnetic min/max detection function is disabled when magnetic threshold event is triggered
#add M_MAXMIN_RST         0x04
#val NO_SEQUENCE          0x00 No reset sequence is active
#val SET                  0x01 Setting this bit resets the MIN_X/Y/Z and MAX_X/Y/Z registers to 0x7FFF and 0x8000
#add M_RST_CNT            0x03
#val EVERY1                  0  Automatic magnetic reset at the beginning of each ODR cycle (default).
#val EVERY16                 1  Automatic magnetic reset every 16 ODR cycles
#val EVERY512                2  Automatic magnetic reset every 512 ODR cycles
#val DISABLE                 3  Automatic magnetic reset is disabled. Magnetic reset only occurs automatically on a transition from Standby to Active mode, or can be triggered manually by setting M_CTRL_REG1[m_rst] = 1


// M_CTRL_REG3      : 0x5D -  Control for magnetometer sensor functions. 
#add M_RAW                0x80
#val EN                   0x01 Values stored in the M_OFF_X/Y/Z registers are applied to the magnetic sample data
#val DIS                  0x00 Values stored in M_OFF_X/Y/Z are not applied to the magnetic sample data
#add M_ASLP_OS            0x70
#val OSR_0                0x00  OSR 0 look at table 203 
#val OSR_1                0x01  OSR 1 look at table 203 
#val OSR_2                0x02  OSR 2 look at table 203 
#val OSR_3                0x03  OSR 3 look at table 203  
#val OSR_4                0x04  OSR 4 look at table 203  
#val OSR_5                0x05  OSR 5 look at table 203 
#val OSR_6                0x06  OSR 6 look at table 203 
#val OSR_7                0x07  OSR  look at table 203 
#add M_THS_XYZ_UPDATE     0x08
#val EN                   0x01 Only the reference value for the axis that triggered the detection event is updated
#val DIS                  0x00 X, Y and Z reference values are all updated when the function triggers on any of the X, Y, or Z axes
#add M_ST_Z               0x04
#add M_ST_XY              0x03

// M_INT_SRC        : 0x5E -  Magnetometer interrupt source. 
#add SRC_M_THS            0x04
#add SRC_M_VECM           0x02
#add SRC_M_DRDY           0x01

// A_VECM_CFG       : 0x5F -  Acceleration vector magnitude configuration register. 
#add a_vecm_en 0x80 
#add a_vecm_updm 0x10 
#add a_vecm_initm 0x20 
#add a_vecm_ele 0x40 

// A_VECM_THS_MSB   : 0x60 -  Acceleration vector magnitude threshold MSB. 
#add a_vbecm_ths 0x1F
#add a_vbecm_dbcntm 0x80

// A_VECM_THS_LSB   : 0x61 -  Acceleration vector magnitude threshold LSB. 
// A_VECM_CNT       : 0x62 -  Acceleration vector magnitude debounce count. 

// A_VECM_INITX_MSB : 0x63 -  Acceleration vector magnitude X-axis reference value MSB. 
#add a_vecm_initx 0x3F

// A_VECM_INITX_LSB : 0x64 -  Acceleration vector magnitude X-axis reference value LSB. 
// A_VECM_INITY_MSB : 0x65 -  Acceleration vector magnitude Y-axis reference value MSB. 
#add a_vecm_inity 0x3F

// A_VECM_INITY_LSB : 0x66 -  Acceleration vector magnitude Y-axis reference value LSB. 
// A_VECM_INITZ_MSB : 0x67 -  Acceleration vector magnitude Z-axis reference value MSB. 
#add a_vecm_initz 0x3F

// A_VECM_INITZ_LSB : 0x68 -  Acceleration vector magnitude Z-axis reference value LSB. 
// M_VECM_CFG       : 0x69 -  Magnetic vector magnitude configuration register. 
#add reserved    0x80
#add m_vecm_ele  0x40
#val DIS        0x00   Event latch disabled
#val EN       0x01   Event latch enabled
#add m_vecm_initm 0x20
#val OUT        0x00   The ASIC uses the current magnetic output data as the initial reference values at the time the m_vecm_en bit is set
#val STORED     0x01   The ASIC uses the data stored in the M_VECM_X/Y/Z_INIT registers as the initial reference values at the time the m_vecm_en bit is set
#add m_vecm_updm  0x10 
#val DIS          0x00 The function updates the reference values with the current X, Y, and Z magnetic data when the event is triggered
#val EN           0x01 The function does not update the reference values when the event is triggered 
#add a_vecm_en 0x08 
#val EN        0x00   Function is disabled
#val DIS       0x01   Function is enabled 
#add m_vecm_wake_en 0x04 
#val EN        0x00   The system excludes the src_m_vecm event flag when evaluating the auto-sleep function
#val DIS       0x01   The system includes the src_m_vecm event flag when evaluating the auto-sleep function 
#add m_vecm_int_en 0x02
#val EN        0x00   Magnetic vector-magnitude interrupt is disabled
#val DIS       0x01   Magnetic vector-magnitude interrupt is enabled
#add m_vecm_init_cfg 0x01 
#val INT2       0x00   Magnetic vector-magnitude interrupt is output on INT2 pin
#val INT1       0x01   Magnetic vector-magnitude interrupt is output on INT1 pin. 
#val DIS       0x01   Function is enabled 

// M_VECM_THS_MSB   : 0x6A -  Magnetic vector magnitude threshold MSB. 
#add m_vecm_ths 0x7F

// M_VECM_THS_LSB   : 0x6B -  Magnetic vector magnitude threshold LSB. 
// M_VECM_CNT       : 0x6C -  Magnetic vector magnitude debounce count. 
// M_VECM_INITX_MSB : 0x6D -  Magnetic vector magnitude X-axis reference value MSB. 
// M_VECM_INITX_LSB : 0x6E -  Magnetic vector magnitude X-axis reference value LSB. 
// M_VECM_INITY_MSB : 0x6F -  Magnetic vector magnitude Y-axis reference value MSB. 
// M_VECM_INITY_LSB : 0x70 -  Magnetic vector magnitude Y-axis reference value LSB. 
// M_VECM_INITZ_MSB : 0x71 -  Magnetic vector magnitude Z-axis reference value MSB. 
// M_VECM_INITZ_LSB : 0x72 -  Magnetic vector magnitude Z-axis reference value LSB. 
// A_FFMT_THS_X_MSB : 0x73 -  X-axis FFMT threshold MSB. 

// A_FFMT_THS_X_LSB : 0x74 -  X-axis FFMT threshold LSB. 
#add a_ffmt_ths_x 0x7F

// A_FFMT_THS_Y_MSB : 0x75 -  Y-axis FFMT threshold MSB. 
// A_FFMT_THS_Y_LSB : 0x76 -  Y-axis FFMT threshold LSB. 
#add a_ffmt_ths_y 0x7F

// A_FFMT_THS_Z_MSB : 0x77 -  Z-axis FFMT threshold MSB. 
// A_FFMT_THS_Z_LSB : 0x78 -  Z-axis FFMT threshold LSB. 
#add a_ffmt_ths_z 0x7F

#endif /* FXOS8700_H_ */

